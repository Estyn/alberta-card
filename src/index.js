import jsQR from 'jsqr';
import { parseShc } from './parsers';
import axios from 'axios'
var { patientTemplate } = require("./patient.js");

const { findPatientResource, findImmunizationResources } = require('./helpers');

var video = document.createElement("video");
var canvasElement = document.getElementById("canvas");
var canvas = canvasElement.getContext("2d");
var loadingMessage = document.getElementById("loadingMessage");
let patientData = {};
var patientElement = document.getElementById("patient");
var iosPassButton = document.getElementById("generateiOSPass");
var linkToiOS = document.getElementById("linkToiOS");


var requestID;
function drawLine(begin, end, color) {
  canvas.beginPath();
  canvas.moveTo(begin.x, begin.y);
  canvas.lineTo(end.x, end.y);
  canvas.lineWidth = 4;
  canvas.strokeStyle = color;
  canvas.stroke();
}

// Use facingMode: environment to attemt to get the front camera on phones
navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } }).then(function (stream) {
  video.srcObject = stream;
  video.setAttribute("playsinline", true); // required to tell iOS safari we don't want fullscreen
  video.play();
  requestID = requestAnimationFrame(tick);
});

function tick() {
  loadingMessage.innerText = "âŒ› Loading video..."
  if (video.readyState === video.HAVE_ENOUGH_DATA) {
    loadingMessage.hidden = true;
    canvasElement.hidden = false;


    canvasElement.height = video.videoHeight;
    canvasElement.width = video.videoWidth;
    canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);
    var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);
    var code = jsQR(imageData.data, imageData.width, imageData.height, {
      inversionAttempts: "dontInvert",
    });
    if (code) {
      drawLine(code.location.topLeftCorner, code.location.topRightCorner, "#FF3B58");
      drawLine(code.location.topRightCorner, code.location.bottomRightCorner, "#FF3B58");
      drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, "#FF3B58");
      drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, "#FF3B58");

      console.log(code.data);
      const shcStatic = 'shc:/5676290952432060346029243740446031222959532654603460292540772804336028702864716745222809286267733976047738625974522641524464124445273341387737345526450453264505542663343240557041263734536359343204592153620360573601064533295312707424284350606122125268345434312572094430602207305839436667573022677054422260032138526304235010042305426225452362413025235530310608457244120958233856096059235227775541242834116126665322721139634326063821080728434365324342723668712041411234585821533545367005426074415332534554673920286820113612590422505740065404453130203050342109765622233203106767266945094160340410660611764434032171446722285433646022080071757373682428545237713012034355230868526161317608743733310812054571264455360712314506206400651156270328390571201128683753372838282452722306713834375668397265382721574308546272231111206909594052620000705404276025543803401156333311610373377108035403243643061272421259676770070562044150772422257055432645635654453407557539211155587703507569720853766366232376683528695676432154777212123623051027585070311159656859520564455943270463567453585640502221591208357572633444542044125422256220455739572923312933641210204155426941374210556966584525410705593759005026634070573144673972453456050637445526772374724567643605206952534529242505006365632163755331763130704259345036535206395531736139257424097630096253083935205303045810666122450544695729045724273853316275712541334431543834532629670074700407384562110840445330597271565305282372317300112637070457115443656508551133534559431033002671370667002036017411690665200523764143215639207329694220300812537472247425236338734557327142002853631069402565003724721235233633080944737222306824591203121163035800715270642807716167223174';
      //const data = await parseShc(shcStatic);
      canvasElement.hidden = true;
      parseShc(code.data).then(data => {
        patientData.shc = code.data;
        patientData.patient = findPatientResource(data.payload);
        patientData.immunizations = findImmunizationResources(data.payload);
        patientData.verifications = data.verifications;
        console.log(patientData)
        var patientTemplateCompiled = Handlebars.compile(patientTemplate);
        const t = patientTemplateCompiled(patientData)
        patientElement.innerHTML = t;
        let name = patientData.patient.name[0].family + ', ' + patientData.patient.name[0].given.join(' ');

        //linkToiOS.setAttribute('href', `https://370f-50-65-182-139.ngrok.io/api/GeneratePass?shc=${patientData.shc}&name=${name}&birthdate=${patientData.patient.birthDate}&code=BhnFLvyjJbYjxtzEovAPpZZPdEBNIFobkfOR3Jaf5bbC81C2TNOf1Q==`);
        linkToiOS.setAttribute('href', `https://generatepasses.azurewebsites.net/api/GeneratePass?code=BhnFLvyjJbYjxtzEovAPpZZPdEBNIFobkfOR3Jaf5bbC81C2TNOf1Q==&shc=${patientData.shc}&name=${name}&birthdate=${patientData.patient.birthDate}`);

        linkToiOS.hidden = false;
      })
      return;
    } else {
      // outputMessage.hidden = false;
      // outputData.parentElement.hidden = true;
    }
  }
  requestAnimationFrame(tick);
}

iosPassButton.onclick = function GenerateIOSPass() {
  const shcStatic = 'shc:/5676290952432060346029243740446031222959532654603460292540772804336028702864716745222809286267733976047738625974522641524464124445273341387737345526450453264505542663343240557041263734536359343204592153620360573601064533295312707424284350606122125268345434312572094430602207305839436667573022677054422260032138526304235010042305426225452362413025235530310608457244120958233856096059235227775541242834116126665322721139634326063821080728434365324342723668712041411234585821533545367005426074415332534554673920286820113612590422505740065404453130203050342109765622233203106767266945094160340410660611764434032171446722285433646022080071757373682428545237713012034355230868526161317608743733310812054571264455360712314506206400651156270328390571201128683753372838282452722306713834375668397265382721574308546272231111206909594052620000705404276025543803401156333311610373377108035403243643061272421259676770070562044150772422257055432645635654453407557539211155587703507569720853766366232376683528695676432154777212123623051027585070311159656859520564455943270463567453585640502221591208357572633444542044125422256220455739572923312933641210204155426941374210556966584525410705593759005026634070573144673972453456050637445526772374724567643605206952534529242505006365632163755331763130704259345036535206395531736139257424097630096253083935205303045810666122450544695729045724273853316275712541334431543834532629670074700407384562110840445330597271565305282372317300112637070457115443656508551133534559431033002671370667002036017411690665200523764143215639207329694220300812537472247425236338734557327142002853631069402565003724721235233633080944737222306824591203121163035800715270642807716167223174';
  //const data = await parseShc(shcStatic);
  canvasElement.hidden = true;
  parseShc(shcStatic).then(data => {
    patientData.shc = shcStatic;
    patientData.patient = findPatientResource(data.payload);
    patientData.immunizations = findImmunizationResources(data.payload);
    patientData.verifications = data.verifications;
    console.log(patientData)
    var patientTemplateCompiled = Handlebars.compile(patientTemplate);
    const t = patientTemplateCompiled(patientData)
    patientElement.innerHTML = t;
    let name = patientData.patient.name[0].family + ', ' + patientData.patient.name[0].given.join(' ');

    linkToiOS.setAttribute('href', `https://370f-50-65-182-139.ngrok.io/api/GeneratePass?shc=${patientData.shc}&name=${name}&birthdate=${patientData.patient.birthDate}`);
    linkToiOS.hidden = false;
    //axios.get(`https://370f-50-65-182-139.ngrok.io/api/GeneratePass?shc=${patientData.shc}&name=${name}&birthdate=${patientData.patient.birthDate}`)
    // axios.post('https://370f-50-65-182-139.ngrok.io/api/GeneratePass', {
    //   shc: patientData.shc,
    //   name: patientData.patient.name[0].family + ', ' + patientData.patient.name[0].given.join(' '),
    //   birthDate: patientData.patient.birthDate,

    // });
  }
  )
}
// const shcStatic = 'shc:/5676290952432060346029243740446031222959532654603460292540772804336028702864716745222809286267733976047738625974522641524464124445273341387737345526450453264505542663343240557041263734536359343204592153620360573601064533295312707424284350606122125268345434312572094430602207305839436667573022677054422260032138526304235010042305426225452362413025235530310608457244120958233856096059235227775541242834116126665322721139634326063821080728434365324342723668712041411234585821533545367005426074415332534554673920286820113612590422505740065404453130203050342109765622233203106767266945094160340410660611764434032171446722285433646022080071757373682428545237713012034355230868526161317608743733310812054571264455360712314506206400651156270328390571201128683753372838282452722306713834375668397265382721574308546272231111206909594052620000705404276025543803401156333311610373377108035403243643061272421259676770070562044150772422257055432645635654453407557539211155587703507569720853766366232376683528695676432154777212123623051027585070311159656859520564455943270463567453585640502221591208357572633444542044125422256220455739572923312933641210204155426941374210556966584525410705593759005026634070573144673972453456050637445526772374724567643605206952534529242505006365632163755331763130704259345036535206395531736139257424097630096253083935205303045810666122450544695729045724273853316275712541334431543834532629670074700407384562110840445330597271565305282372317300112637070457115443656508551133534559431033002671370667002036017411690665200523764143215639207329694220300812537472247425236338734557327142002853631069402565003724721235233633080944737222306824591203121163035800715270642807716167223174';
// parseShc(shcStatic).then(data => {
//   const patient = findPatientResource(data.payload);
//   const immunizations = findImmunizationResources(data.payload);
//   const verifications = data.verifications;
//   console.log(data)
//   var patientTemplateCompiled = Handlebars.compile(patientTemplate);
//   const t = patientTemplateCompiled({patient,immunizations,verifications})
//   patientElement.innerHTML=t;
//   //document.body.append(t)
// })


